/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nlet a = '';\nlet b = '';\nlet sign = '';\nlet finish = false;\nconst history = document.querySelector('#history');\n\nconst digit = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', ];\nconst action = ['-', '+', 'x', '/'];\nconst historyArr = [];\n\nconst out = document.querySelector('.calc-screen p');\n\nfunction allClear() {\n    a = '';\n    b = '';\n    sign = '';\n    finish = false;\n    out.textContent = 0;\n    history.textContent = '';\n}\n\ndocument.querySelector('.calc').\naddEventListener('click', (event) => {\n    if (event.target.classList.contains('history-span')) {\n        console.log('ok');\n    }\n    if (event.target.classList.contains('ac')) {\n        allClear();\n    }\n    if (!event.target.classList.contains('btn')) return;\n\n    const key = event.target.textContent;\n\n    if (digit.includes(key)) {\n        if (b === '' && sign === '') {\n            if (key === '.' && a.includes('.')) {\n\n                a += '';\n                out.textContent = a;\n            } else {\n                a += key;\n                out.textContent = a;\n            }\n        } else if (a !== '' && b !== '' && finish) {\n            b = key;\n            finish = false;\n            out.textContent = b;\n        } else {\n            if (key === '.' && b.includes('.')) {\n                b += '';\n                out.textContent = b;\n            } else {\n                b += key;\n                out.textContent = b;\n            }\n        }\n        console.log(a, sign, b);\n        return;\n    }\n\n    if (action.includes(key)) {\n        sign = key;\n        out.textContent = sign;\n    }\n\n    if (key === '+/-') {\n        if (b === '' && sign === '') {\n            a = a * (-1);\n            out.textContent = a;\n        } else if (a !== '' && b !== '') {\n            b = b * (-1);\n            out.textContent = b;\n        }\n    }\n\n    if (key === '=') {\n        if (b === '') b = a;\n        switch (sign) {\n            case '+':\n                a = (+a) + (+b);\n                break;\n            case '-':\n                a = a - b;\n                break;\n            case 'x':\n                a = a * b;\n                break;\n            case '/':\n                if (b === '0') {\n                    allClear();\n                    return;\n                }\n                a = a / b;\n                break;\n        }\n        finish = true;\n        out.textContent = a;\n        history.textContent = a;\n        addToHistory(a);\n        renderHistory();\n    }\n})\n\n\nconst observer = new MutationObserver(\n    function(mutations) {\n        if (a.toString().length > 10) {\n            out.style.fontSize = 400 / a.toString().length + 'px';\n            if (b.toString().length > 12) {\n                out.style.fontSize = 400 / b.toString().length + 'px';\n            }\n        } else if (b.toString().length > 10) {\n            out.style.fontSize = 400 / b.toString().length + 'px';\n        } else {\n            out.style.fontSize = '44px';\n        }\n    }\n);\nobserver.observe(out, { childList: true });\n\n// popup history\nconst popupHistory = document.querySelector('.calc-popup');\nlet popupContainer = document.querySelector('.popup-content__history');\nconst popupHistoryClose = document.querySelector('.popup-content__close');\n// historyArr\n\nfunction addToHistory(a) {\n    historyArr.push({ result: a });\n}\n\nfunction renderHistory(result) {\n    popupContainer.innerHTML = '';\n    historyArr.forEach(num => {\n        popupContainer.innerHTML +=\n            `\n           <p>${num.result}</p>\n            `\n    })\n}\n\nhistory.addEventListener('click', function() {\n    popupHistory.style.display = \"block\";\n    renderHistory();\n});\n\npopupHistoryClose.addEventListener('click', function() {\n    popupHistory.style.display = \"none\";\n})\n\n\n\n// let date = new Date().toLocaleDateString() + ' at ' +\n//     new Date().toLocaleTimeString();\n// console.log(date);\n\n//# sourceURL=webpack://gulp-2022/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;